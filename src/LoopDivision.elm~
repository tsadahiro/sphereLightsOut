module LoopDivision exposing (..)

import Browser
import Time
import Angle
import Camera3d
import Color
import Direction3d
import Html exposing (Html)
import Html.Attributes as Attrs
import Html.Events as Evts
import Length
import Pixels
import Point3d
import Sphere3d
import Cylinder3d
import Triangle3d
import Scene3d
import Axis3d
import Scene3d.Material as Material
import Viewpoint3d
import Dict exposing (Dict)

main = Browser.element { init = init
                       , update = update
                       , view = view
                       , subscriptions = subscriptions
                       }

type alias Model = { level : Int
                   , vertices : List Vertex
                   , edges : List Edge
                   , faces : List Face
                   , theta : Float
                   }
type alias Vertex = {x:Float, y:Float, z:Float}
type alias Edge = {from: Int, to:Int}
type alias Face = List Int

type Msg = Elapsed Time.Posix
    | Divide

initialVertices = [ Vertex 1 1 1
                , Vertex 1 (-1) (-1)
                , Vertex (-1) 1 (-1) 
                , Vertex (-1) (-1) 1
                ]
initialEdges = [ Edge 0 1
               , Edge 0 2
               , Edge 0 3
               , Edge 1 2
               , Edge 3 1
               , Edge 2 3
               ]
initialFaces = [ [0, 1, 2]
               , [0, 2, 3]
               , [0, 3, 1]
               , [2, 3, 1]
               ]

init : () -> (Model, Cmd Msg)
init _ = ( Model 0 initialVertices initialEdges initialFaces 0
         , Cmd.none)
    
update : Msg -> Model -> (Model, Cmd Msg)
update  msg model =
    case msg of
        Elapsed t ->
            ( {model|theta = model.theta + 1
              ,vertices = List.map rotation model.vertices}
            , Cmd.none)
        Divide ->
            ( refine model, Cmd.none)


refine : Model -> Model
refine model =
    let
        edges = model.edges
        vertices = model.vertices
        faces = model.faces
        getVertex : Int -> Vertex
        getVertex i =
            Maybe.withDefault (Vertex 0 0 0) <|
                List.head <| List.drop i vertices
        midPoint : Vertex -> Vertex -> Vertex
        midPoint  v w =
            let
                mx = (v.x + w.x)/2
                my = (v.y + w.y)/2
                mz = (v.z + w.z)/2
                r = (sqrt 3)/(sqrt (mx^2+my^2+mz^2))
            in
                Vertex (r*mx) (r*my) (r*mz)
        newVertices : List Vertex
        newVertices =
            List.map (\e ->
                          let
                              v = getVertex e.from
                              w = getVertex e.to
                          in
                              midPoint v w
                     ) edges
        midPoints : Dict (Int, Int) Int
        midPoints = 
            List.foldl (\e dict ->
                            let
                                v = getVertex e.from
                                w = getVertex e.to
                            in
                                Dict.insert (e.from, e.to)
                                    ((Dict.size dict)+(List.length vertices))
                                    dict
                       )
                Dict.empty
                edges
        divideEdge : Edge -> List Edge
        divideEdge edge =
            [{ from = edge.from
             , to = Maybe.withDefault -1 <|
                    Dict.get (edge.from, edge.to) midPoints
             }
            ,{ from = Maybe.withDefault -1 <|
                      Dict.get (edge.from, edge.to) midPoints
             , to = edge.to
             }
            ]
        edgeFromFace : Face -> List Edge
        edgeFromFace face =
            let
                v1 = Maybe.withDefault (-1) <|  List.head face
                v2 = Maybe.withDefault (-1) <|  List.head (List.drop 1 face)
                v3 = Maybe.withDefault (-1) <|  List.head (List.drop 2 face)
                w1 = if Dict.member (v1,v2) midPoints then
                         Dict.get (v1,v2) midPoints
                     else (if Dict.member (v2,v1) midPoints then
                               Dict.get (v2,v1) midPoints
                           else
                               Nothing
                          )
                w2 = if Dict.member (v2,v3) midPoints then
                         Dict.get (v2,v3) midPoints
                     else (if Dict.member (v3,v2) midPoints then
                               Dict.get (v3,v2) midPoints
                           else
                               Nothing
                          )
                w3 = if Dict.member (v3,v1) midPoints then
                         Dict.get (v3,v1) midPoints
                     else (if Dict.member (v1,v3) midPoints then
                               Dict.get (v1,v3) midPoints
                           else
                               Nothing
                          )
            in
                case (w1,w2,w3) of
                    (Just a, Just b, Just c) ->
                        [ {from = a, to = b}
                        , {from = b, to = c}
                        , {from = c, to = a}
                        ]
                    _ ->
                        []

        newEdges : List Edge
        newEdges =
            List.concat <|
                (List.map divideEdge edges)++
                    (List.map edgeFromFace faces)

        facesFromFace : Face -> List Face
        facesFromFace face =
            let
                v1 = Maybe.withDefault (-1) <|  List.head face
                v2 = Maybe.withDefault (-1) <|  List.head (List.drop 1 face)
                v3 = Maybe.withDefault (-1) <|  List.head (List.drop 2 face)
                w1 = if Dict.member (v1,v2) midPoints then
                         Dict.get (v1,v2) midPoints
                     else (if Dict.member (v2,v1) midPoints then
                               Dict.get (v2,v1) midPoints
                           else
                               Nothing
                          )
                w2 = if Dict.member (v2,v3) midPoints then
                         Dict.get (v2,v3) midPoints
                     else (if Dict.member (v3,v2) midPoints then
                               Dict.get (v3,v2) midPoints
                           else
                               Nothing
                          )
                w3 = if Dict.member (v3,v1) midPoints then
                         Dict.get (v3,v1) midPoints
                     else (if Dict.member (v1,v3) midPoints then
                               Dict.get (v1,v3) midPoints
                           else
                               Nothing
                          )
            in
                case (w1,w2,w3) of
                    (Just a, Just b, Just c) ->
                        [ [v1, a, c]
                        , [v2, b, a]
                        , [v3, c, b]
                        , [a,b,c]
                        ]
                    _ ->
                        []
        newFaces = List.concat <| List.map facesFromFace faces
    in
        Model (model.level+1)
            (vertices++newVertices) (edges++newEdges) (faces++newFaces)
            model.theta



                
rotation : Vertex -> Vertex
rotation v =
    Vertex ((cos (pi/90)) *v.x - ((sin (pi/90))*v.y))
        ((sin (pi/90)) *v.x + ((cos (pi/90))*v.y))
        v.z

view : Model -> Html Msg
view model =
    let
        material =
            Material.nonmetal
                { baseColor = Color.lightBlue
                , roughness = 0.4 -- varies from 0 (mirror-like) to 1 (matte)
                }
        redMaterial =
            Material.nonmetal
                { baseColor = Color.red
                , roughness = 0.4 -- varies from 0 (mirror-like) to 1 (matte)
                }
        blackMaterial =
            Material.nonmetal
                { baseColor = Color.black
                , roughness = 0.4 -- varies from 0 (mirror-like) to 1 (matte)
                }
        sphereView center =
            Scene3d.sphere material <|
                Sphere3d.withRadius (Length.meters 0.03) (Point3d.meters center.x center.y center.z)

        verticesView =
            List.map (\v -> Point3d.meters v.x v.y v.z) model.vertices

        spheres =
            List.map sphereView model.vertices

        point p =
            Point3d.meters p.x p.y p.z

        dist p q =
            sqrt ((p.x - q.x)^2 + (p.y - q.y)^2 + (p.z - q.z)^2 )

        vertex i =
            Maybe.withDefault {x=0,y=0,z=0} <|
                List.head <| List.drop (i) model.vertices
                
        edge edata =
            Scene3d.cylinderWithShadow blackMaterial <|
                Cylinder3d.startingAt 
                    (point <| vertex edata.from)
                    (Maybe.withDefault Direction3d.x <|
                         (Direction3d.from (point <| vertex edata.from) (point <| vertex edata.to)))
                    {radius = Length.meters 0.005
                    ,length = Length.meters (dist (vertex edata.from) (vertex edata.to))
                    }
        edges = (List.map edge model.edges)

        faceView  fdata =
            let
                a = Maybe.withDefault (-1) <| List.head fdata
                b = Maybe.withDefault (-1) <| List.head <| List.drop 1 fdata
                c = Maybe.withDefault (-1) <| List.head <| List.drop 2 fdata
            in
                Scene3d.facet material <|
                    Triangle3d.fromVertices
                        ( (point <| vertex a)
                        , (point <| vertex b)
                        , (point <| vertex c)
                        )

        facesView =
            List.map faceView model.faces
            
        camera =
            Camera3d.perspective
                { viewpoint =
                    Viewpoint3d.lookAt
                        { focalPoint = Point3d.origin
                        , eyePoint = Point3d.meters 10 10 10
                        , upDirection = Direction3d.positiveZ
                        }
                , verticalFieldOfView = Angle.degrees 30
                }
    in
    Html.div[]
        [ Html.div [] [
               Html.button [Evts.onClick Divide][
                    Html.text "divide"
                    ]
              ]
        , Scene3d.sunny
             { camera = camera
             , clipDepth = Length.meters 0.05
             , dimensions = ( Pixels.int 1000, Pixels.int 1000 )
             , background = Scene3d.transparentBackground
             --, entities = spheres ++ edges ++ facesView
             , entities = edges ++ facesView
             , shadows = True
             , upDirection = Direction3d.z
             , sunlightDirection = Direction3d.xz (Angle.degrees -120)
             }
        ]


subscriptions : Model -> Sub Msg
subscriptions  model =
    Time.every 50 Elapsed


                                       

    
